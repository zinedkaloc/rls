name: Create Release and Update Changelog
on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory:
          [
            "engine/core",
            "engine/monitor",
            "engine/realtime",
            "engine/scheduler",
            "engine/worker",
            "platform/core",
            "platform/sync",
            "platform/worker",
            "studio",
          ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install Dependencies
        run: npm ci --prefix ${{ matrix.directory }}

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install Python Dependencies
        run: pip install PyGithub

      - name: Generate changelogs and update versions
        run: python3 main.py

      - name: Read Changelog Data
        id: changelog
        run: |
          content=`cat changelog_data.json`
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "::set-output name=data::$content"

      - name: Update version and create new branch
        id: version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          npm version patch --no-git-tag-version --prefix ${{ matrix.directory }}
          git add ${{ matrix.directory }}/package.json ${{ matrix.directory }}/package-lock.json
          echo "::set-output name=version::$(cat ${{ matrix.directory }}/package.json | jq -r '.version')"
          git checkout -b release-${{ matrix.directory }}-${{ steps.version.outputs.version }}
          git stash
          git pull origin master --rebase
          git stash pop
          git add ${{ matrix.directory }}/package.json ${{ matrix.directory }}/package-lock.json
          git commit -m "chore(release): $(cat ${{ matrix.directory }}/package.json | jq -r '.version') [skip ci]"

      - name: Push changes
        run: |
          git push origin HEAD:release-${{ matrix.directory }}-${{ steps.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create tag
        run: |
          git tag -d v$(cat ${{ matrix.directory }}/package.json | jq -r '.version') || true
          git tag v$(cat ${{ matrix.directory }}/package.json | jq -r '.version')

      - name: Push tag
        run: |
          git push origin --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.data }}
          draft: false
          prerelease: false

  top_level:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Update top level version and create new branch
        run: |


          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          npm version patch --no-git-tag-version
          git add package.json package-lock.json
          git checkout -b release-top-level-$(cat package.json | jq -r '.version')
          git stash
          git pull origin master --rebase
          git stash pop
          git add package.json package-lock.json
          git commit -m "chore(release): $(cat package.json | jq -r '.version') [skip ci]"

      - name: Push changes
        run: |
          git push origin HEAD:release-top-level-$(cat package.json | jq -r '.version')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create tag
        run: |
          git tag -d v$(cat package.json | jq -r '.version') || true
          git tag v$(cat package.json | jq -r '.version')

      - name: Push tag
        run: |
          git push origin --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate aggregated changelog
        id: agg_changelog
        run: |
          chmod +x ./generate-aggregated-changelog.sh
          ./generate-aggregated-changelog.sh > aggregated-changelog.md
          echo "::set-output name=aggregated_changelog::$(cat aggregated-changelog.md)"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v$(cat package.json | jq -r '.version')
          release_name: Release v$(cat package.json | jq -r '.version')
          body: ${{ steps.agg_changelog.outputs.aggregated_changelog }}
          draft: false
          prerelease: false
